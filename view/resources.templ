package view

import "fmt"
import "github.com/sknutsen/planner/lib"
import "github.com/sknutsen/planner/models"
import "github.com/sknutsen/planner/routes"

templ Resources(state models.ResourcesState) {
	@MainLayout(state.State) {
		<div id="resources">
			<div id="resources__header">
				@planSelector(state.State)
			</div>
			<div
				id="resources__body"
				hx-get={ fmt.Sprintf("/resources/%d/resources", state.State.SelectedPlanId) }
				hx-swap="innerHTML"
				hx-ext="multi-swap"
				hx-trigger="load, updatedResource from:body"
			>
				@defaultLoader()
			</div>
			<div id="resources__footer">
				@newResourceButton(state.State.SelectedPlanId, false, state.State.SelectedPlanId == 0)
			</div>
		</div>
	}
}

templ PlanResources(resources models.PlanResourcesResponse) {
	@ListResources(resources.Resources, true, false)
}

templ ListResources(resources []models.Resource, hideDescription bool, hideDate bool) {
	for _, t := range resources {
		@ResourcePreview(t, hideDescription, hideDate)
	}
}

templ ResourcePreview(resource models.Resource, hideDescription bool, hideDate bool) {
	<div id={ fmt.Sprintf("resource-%d", resource.Id) } class={ "resource-preview surface-02" }>
		<div class="resource-preview__header">
			<h3
				class="resource-preview__identifier"
				hx-target="#modal"
				hx-swap="outerHTML"
				hx-get={ fmt.Sprintf("/resource/%d", resource.Id) }
			>
				{ resource.Title }
			</h3>
			<button
				class={ templ.KV("hidden", lib.IsNullOrEmpty(resource.Content)) }
				type="button"
				onclick={ toggleContent(resource.Id) }
			>
				<span id={ fmt.Sprintf("resource-%d__expand-icon", resource.Id) } class="material-symbols-outlined">
					expand_more
				</span>
			</button>
		</div>
		<div
			id={ fmt.Sprintf("resource-%d__content", resource.Id) }
			class={ "resource-preview__content" ,
		templ.KV("hidden", hideDescription) }
		></div>
		@renderContent(resource.Id, fmt.Sprint(resource.Content))
	</div>
}

templ Resource(state models.ClientState, resource models.Resource) {
	@Modal("") {
		<form id="selected-resource" class="resource input-form">
			<input type="number" class="hidden" name="id" value={ fmt.Sprint(resource.Id) }/>
			<input type="number" class="hidden" name="plan_id" value={ fmt.Sprint(state.SelectedPlanId) }/>
			<input type="text" name="title" placeholder="Title" value={ resource.Title }/>
			<input type="number" class="hidden" name="type" value={ fmt.Sprint(resource.Type) }/>
			@mdEditor("selected-resource__content", "content", resource.Content)
			<div class="button-group">
				<button
					type="submit"
					hx-target="#modal"
					hx-swap="outerHTML"
					hx-post={ routes.ResourceUpdate }
					hx-include="closest form"
					hx-ext="json-enc"
				>Save</button>
				if resource.Id != 0 {
					<button
						type="button"
						hx-target="#modal"
						hx-swap="outerHTML"
						hx-get={ fmt.Sprintf("/resource/%d/delete",
			resource.Id) }
					>Delete</button>
				}
				<button type="button" hx-target="#modal" hx-swap="outerHTML" hx-get={ routes.ComponentsModal }>Cancel</button>
			</div>
		</form>
		<script>
	simplemde = new SimpleMDE({
		element: document.getElementById("selected-resource__content"),
		forceSync: true,
	});
</script>
	}
}

templ newResourceButton(planId int, showLabel bool, isDisabled bool) {
	if !isDisabled {
		<div
			class="new-task-button"
			hx-target="#modal"
			hx-swap="outerHTML"
			hx-get={ fmt.Sprintf("/resources/%d/create", planId) }
		>
			<span class="material-symbols-outlined">
				add
			</span>
			if showLabel {
				<span>
					Add
				</span>
			}
		</div>
	}
}

script toggleContent(id int) {
const desc = document.getElementById("resource-" + id + "__content");
const icon = document.getElementById("resource-" + id + "__expand-icon");
const isHidden = desc.classList.contains("hidden");

if (isHidden) {
mod.show(desc.id);
icon.innerHTML = "expand_less"
} else {
mod.hide(desc.id);
icon.innerHTML = "expand_more"
}
}

script renderContent(id int, description string) {
const desc = document.getElementById("resource-" + id + "__content");

// desc.innerHTML = md.render(description);
// desc.innerHTML = marked.parse(description);
desc.innerHTML = simplemde.markdown(description);
}
