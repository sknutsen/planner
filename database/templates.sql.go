// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: templates.sql

package database

import (
	"context"
)

const createTemplate = `-- name: CreateTemplate :exec
INSERT INTO templates (
    plan_id,
    title,
    subtitle,
    description
) VALUES (
    ?,
    ?,
    ?,
    ?
)
`

type CreateTemplateParams struct {
	PlanID      int64
	Title       string
	Subtitle    interface{}
	Description interface{}
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) error {
	_, err := q.db.ExecContext(ctx, createTemplate,
		arg.PlanID,
		arg.Title,
		arg.Subtitle,
		arg.Description,
	)
	return err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
DELETE FROM templates
WHERE id IN (SELECT t.id FROM templates as t
             INNER JOIN plans as p ON t.plan_id = p.id
             LEFT OUTER JOIN plan_access as pa ON p.id = pa.plan_id
             WHERE t.id = ?1 AND (p.user = ?2 OR pa.user = ?2))
`

type DeleteTemplateParams struct {
	ID     int64
	UserId string
}

func (q *Queries) DeleteTemplate(ctx context.Context, arg DeleteTemplateParams) error {
	_, err := q.db.ExecContext(ctx, deleteTemplate, arg.ID, arg.UserId)
	return err
}

const getTemplate = `-- name: GetTemplate :one
SELECT 
t.id, t.plan_id, t.title, t.subtitle, t.description 
FROM templates as t
INNER JOIN plans as p ON t.plan_id = p.id
LEFT OUTER JOIN plan_access as pa ON p.id = pa.plan_id
WHERE t.id = ?1 AND (p.user = ?2 OR pa.user = ?2)
`

type GetTemplateParams struct {
	ID     int64
	UserId string
}

func (q *Queries) GetTemplate(ctx context.Context, arg GetTemplateParams) (Template, error) {
	row := q.db.QueryRowContext(ctx, getTemplate, arg.ID, arg.UserId)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.Title,
		&i.Subtitle,
		&i.Description,
	)
	return i, err
}

const getTemplatesByPlan = `-- name: GetTemplatesByPlan :many
SELECT
  t.id, t.plan_id, t.title, t.subtitle, t.description
FROM
  templates AS t
WHERE
  t.plan_id IN (
    SELECT
      p.id
    FROM
      plans AS p
      LEFT OUTER JOIN plan_access AS pa ON p.id = pa.plan_id
    WHERE
      p.id = ?1
      AND (
        p.user = ?2 OR pa.user = ?2
      )
  )
ORDER BY t.title ASC
`

type GetTemplatesByPlanParams struct {
	PlanId int64
	UserId string
}

func (q *Queries) GetTemplatesByPlan(ctx context.Context, arg GetTemplatesByPlanParams) ([]Template, error) {
	rows, err := q.db.QueryContext(ctx, getTemplatesByPlan, arg.PlanId, arg.UserId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.PlanID,
			&i.Title,
			&i.Subtitle,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTemplate = `-- name: UpdateTemplate :exec
UPDATE templates 
SET title = ?1, subtitle = ?2, description = ?3
WHERE id IN (SELECT t.id FROM templates as t
             INNER JOIN plans as p ON t.plan_id = p.id
             LEFT OUTER JOIN plan_access as pa ON p.id = pa.plan_id
             WHERE t.id = ?4 AND (p.user = ?5 OR pa.user = ?5))
`

type UpdateTemplateParams struct {
	Title       string
	Subtitle    interface{}
	Description interface{}
	ID          int64
	UserId      string
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) error {
	_, err := q.db.ExecContext(ctx, updateTemplate,
		arg.Title,
		arg.Subtitle,
		arg.Description,
		arg.ID,
		arg.UserId,
	)
	return err
}
